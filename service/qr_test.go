//go:build test
// +build test

package service

import (
	"bytes"
	"image/png"
	"io/ioutil"
	"testing"

	"github.com/stretchr/testify/assert"
	"salbo.ai/short-url/repository"
)

func saveBytes(testFilename string, b []byte) error {
	if err := ioutil.WriteFile(testFilename, b, 0644); err != nil {
		return err
	}

	// cwd, err := os.Getwd()
	// if err != nil {
	// 	return err
	// }
	// log.Printf("Wrote : %d bytes to %s/%s", len(b), cwd, testFilename)

	return nil
}

func TestGenerateVcard(t *testing.T) {
	vcard := repository.VCard{Name: "Foo", Email: "bar@baz.ai"}
	qrCodeBytes, err := GenerateQRCode(vcard.String(), DefaultQRCodeOptions())
	testFilename := "qr_test_vcard.png"
	err = saveBytes(testFilename, qrCodeBytes)
	assert.NoError(t, err, "Saving PNG should not produce an error")
}

func TestGenerateQRCode(t *testing.T) {
	// Set up a mock repository
	repository.MockSetup()
	defer repository.MockTeardown()

	// Save a test URL to the mock repository
	id := "testID"
	longURL := "https://example.com"
	err := repository.SaveURL(id, longURL)
	assert.NoError(t, err, "Saving URL to repository should not produce an error")

	// Generate a QR code for the saved URL
	opt := DefaultQRCodeOptions()
	opt.Logo = "example.png"
	opt.Padding = 0
	// opt.Halftone = "example.png"
	qrCodeBytes, err := GenerateQRCode(ShortUrl(id), opt)
	assert.NoError(t, err, "Generating QR code should not produce an error")
	assert.NotEmpty(t, qrCodeBytes, "QR code bytes should not be empty")

	testFilename := "qr_test_code.png"
	err = saveBytes(testFilename, qrCodeBytes)
	assert.NoError(t, err, "Saving PNG should not produce an error")

	fileBytes, err := ioutil.ReadFile(testFilename)
	assert.NoError(t, err, "Reading QR code from file should not produce an error")
	assert.NotEmpty(t, fileBytes, "File bytes should not be empty")
	// log.Printf("Loaded %d bytes", len(fileBytes))

	// Validate that the generated bytes are a valid PNG image
	img, err := png.Decode(bytes.NewReader(fileBytes))
	assert.NoError(t, err, "Decoding PNG image should not produce an error")
	assert.NotNil(t, img, "Decoded image should not be nil")

	// // Further validation could include checking image dimensions, etc.
	bounds := img.Bounds()
	// log.Printf("Size %d x %d", bounds.Dx(), bounds.Dy())
	assert.True(t, bounds.Dx() > 0 && bounds.Dy() > 0, "Image dimensions should be greater than zero")
}
